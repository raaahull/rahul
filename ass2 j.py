# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G8QWs-X8VqB_EVqkK-qSP2fKEiXS733C
"""

from google.colab import drive
drive.mount('/content/drive')

import random
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

DATADIR = "/content/drive/MyDrive/AIML 2023/Training"
CATEGORIES = ["Early_Blight", "Healthy"] 

data = []
for category in CATEGORIES:
    path = os.path.join(DATADIR, category)
    class_num = CATEGORIES.index(category)
    files = os.listdir(path)
    random.shuffle(files)
    files = files[:1000]
    for img in files:
        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)
        data.append([img_array, class_num])
# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

# Preprocess the dataset
X = []
y = []
for features, label in data:
    X.append(features.flatten())
    y.append(label)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
print("Logistic Regression Accuracy:", lr.score(X_test, y_test))
print("Confusion Matrix for Logistic Regression:")
print(confusion_matrix(y_test, y_pred_lr))

# Decision Tree
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)
print("Decision Tree Accuracy:", dt.score(X_test, y_test))
print("Confusion Matrix for Decision Tree:")
print(confusion_matrix(y_test, y_pred_dt))


# SVM
svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)
print("SVM Accuracy:", svm.score(X_test, y_test))
print("Confusion Matrix for SVM:")
print(confusion_matrix(y_test, y_pred_svm))


# KNN
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)
print("KNN Accuracy:", knn.score(X_test, y_test))
print("Confusion Matrix for KNN:")
print(confusion_matrix(y_test, y_pred_knn))


# Random Forest
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
print("Random Forest Accuracy:", rf.score(X_test, y_test))
print("Confusion Matrix for Random Forest:")
print(confusion_matrix(y_test, y_pred_rf))